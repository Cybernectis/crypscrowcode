`cssnano`] is a modular CSS minifier.
* [`lost`] is a feature-rich `calc()` grid system.
* [`rtlcss`] mirrors styles for right-to-left locales.

[PostCSS plugin development]: https://github.com/postcss/postcss/blob/master/docs/writing-a-plugin.md
[`postcss-inline-svg`]:       https://github.com/TrySound/postcss-inline-svg
[`react-css-modules`]:        https://github.com/gajus/react-css-modules
[`postcss-autoreset`]:        https://github.com/maximkoretskiy/postcss-autoreset
[`postcss-write-svg`]:        https://github.com/jonathantneal/postcss-write-svg
[`postcss-utilities`]: https://github.com/ismamz/postcss-utilities
[`postcss-initial`]:          https://github.com/maximkoretskiy/postcss-initial
[`postcss-sprites`]:          https://github.com/2createStudio/postcss-sprites
[`postcss-modules`]:          https://github.com/outpunk/postcss-modules
[`postcss-sorting`]:          https://github.com/hudochenkov/postcss-sorting
[`postcss-cssnext`]:          http://cssnext.io
[`postcss-image-set-polyfill`]: https://github.com/SuperOl3g/postcss-image-set-polyfill
[`postcss-assets`]:           https://github.com/assetsjs/postcss-assets
[`font-magician`]:            https://github.com/jonathantneal/postcss-font-magician
[`autoprefixer`]:             https://github.com/postcss/autoprefixer
[`cq-prolyfill`]:             https://github.com/ausi/cq-prolyfill
[`postcss-rtl`]:              https://github.com/vkalinichev/postcss-rtl
[`postcss-use`]:              https://github.com/postcss/postcss-use
[`css-modules`]:              https://github.com/css-modules/css-modules
[`colorguard`]:               https://github.com/SlexAxton/css-colorguard
[`stylelint`]:                https://github.com/stylelint/stylelint
[`stylefmt`]:                 https://github.com/morishitter/stylefmt
[`cssnano`]:                  http://cssnano.co
[`precss`]:                   https://github.com/jonathantneal/precss
[`doiuse`]:                   https://github.com/anandthakker/doiuse
[`rtlcss`]:                   https://github.com/MohammadYounes/rtlcss
[`short`]:                    https://github.com/jonathantneal/postcss-short
[`lost`]:                     https://github.com/peterramsing/lost
[`image-set`]:                https://drafts.csswg.org/css-images-3/#image-set-notation

## Syntaxes

PostCSS can transform styles in any syntax, not just CSS.
If there is not yet support for your favorite syntax,
you can write a parser and/or stringifier to extend PostCSS.

* [`sugarss`] is a indent-based syntax like Sass or Stylus.
* [`postcss-scss`] allows you to work with SCSS
  *(but does not compile SCSS to CSS)*.
* [`postcss-sass`] allows you to work with Sass
    *(but does not compile Sass to CSS)*.
* [`postcss-less`] allows you to work with Less
  *(but does not compile LESS to CSS)*.
* [`postcss-less-engine`] allows you to work with Less
  *(and DOES compile LESS to CSS using true Less.js evaluation)*.
* [`postcss-js`] allows you to write styles in JS or transform
  React Inline Styles, Radium or JSS.
* [`postcss-safe-parser`] finds and fixes CSS syntax errors.
* [`midas`] converts a CSS string to highlighted HTML.

[`sugarss`]:             https://github.com/postcss/sug